(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{400:function(_,t,r){"use strict";r.r(t);var v=r(3),s=Object(v.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_1-什么是前端安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是前端安全"}},[_._v("#")]),_._v(" 1.什么是前端安全")]),_._v(" "),t("p",[_._v("所有发生在浏览器、单页面应用、Web 页面当中的安全问题都算是算是“前端安全问题”。")]),_._v(" "),t("h2",{attrs:{id:"_2-前端目前存在哪些安全问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-前端目前存在哪些安全问题"}},[_._v("#")]),_._v(" 2.前端目前存在哪些安全问题")]),_._v(" "),t("h3",{attrs:{id:"_2-1-跨站脚本攻击-xss"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-跨站脚本攻击-xss"}},[_._v("#")]),_._v(" 2.1 跨站脚本攻击（XSS）")]),_._v(" "),t("ul",[t("li",[_._v("原理")])]),_._v(" "),t("p",[_._v("xss 说白了就是攻击者想尽一切的方法，将可执行的代码注入到我们的页面中，让页面进行一些非法的操作（浏览器错误的将攻击者输入的数据当做 JavaScript 脚本给执行了）。\nxss 从攻击的时间上可以分为持久型（存储型）攻击和非持久型（反射型）攻击。")]),_._v(" "),t("p",[t("code",[_._v("持久型")])]),_._v(" "),t("p",[_._v("持久型的就是指攻击者通过我们的页面，将具有攻击性的代码通过服务器保存到了数据库中，导致其他的用户在浏览当前页面时，受到了攻击。最常见的就是具有评论功能的页面。")]),_._v(" "),t("p",[t("code",[_._v("非持久型")])]),_._v(" "),t("p",[_._v("非持久型相比于持久型攻击危害就小的多了，一般通过修改 URL 参数的方式加入攻击代码，诱导用户访问链接从而进行攻击。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("场景")]),_._v(" "),t("p",[_._v("1.页面中所有的 input 框"),t("br"),_._v("\n2.window.location（href、hash 等）"),t("br"),_._v("\n3.localstorage"),t("br"),_._v("\n4.XMLHttpRequest 返回的数据")])])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("防御")]),_._v(" "),t("p",[_._v("防御的方式总的来说就是两方面。一方面是验证所有输入数据，有效检测攻击；另一方就是对所有输出数据进行适当的编码，以防止任何已成功注入的脚本在浏览器端运行。")]),_._v(" "),t("p",[t("code",[_._v("转义字符")])]),_._v(" "),t("p",[_._v('一般会转（&、<、>、"、’、/）这 6 个字符。'),t("br"),_._v("\n比如说将")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("<script><\/script>\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("p",[_._v("标签存储为")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("&lt;script&gt&lt;/script&gt\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("p",[_._v("这样浏览器就不会将这段代码当做 js 来执行了")])])]),_._v(" "),t("h3",{attrs:{id:"_2-2-跨站请求伪造-csrf-cross-site-request-forgery"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-跨站请求伪造-csrf-cross-site-request-forgery"}},[_._v("#")]),_._v(" 2.2 跨站请求伪造 CSRF（Cross Site Request Forgery）")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("原理")]),_._v(" "),t("p",[_._v("CSRF(Cross Site Request Forgery)，即跨站请求伪造，是一种常见的 Web 攻击。CSRF 攻击过程的受害者用户登录网站 A，输入个人信息，在本地保存服务器生成的 cookie。然后在 A 网站点击由攻击者构建一条恶意链接跳转到 B 网站，然后 B 网站携带着的用户 cookie 信息去访问 B 网站。让 A 网站造成是用户自己访问的假相，从而来进行一些列的操作，常见的就是转账。")]),_._v(" "),t("p",{attrs:{align:"center"}},[t("img",{attrs:{src:"/img/20210610003120839.png"}})])]),_._v(" "),t("li",[t("p",[_._v("场景")]),_._v(" "),t("p",[_._v("网站使用 Cookie 验证用户"),t("br"),_._v("\n用户没有登出网站"),t("br"),_._v("\n网站没有做任何 CSRF 的防御")])]),_._v(" "),t("li",[t("p",[_._v("防御")]),_._v(" "),t("p",[_._v("大致要遵循以下几点规则：")]),_._v(" "),t("p",[_._v("1.Get 请求不对数据进行修改"),t("br"),_._v(" 2.不让第三方网站访问到用户 Cookie"),t("br"),_._v(" 3.阻止第三方网站请求接口 "),t("br"),_._v(" 4.请求时附带验证信息，比如验证码或者 Token")]),_._v(" "),t("p",[t("code",[_._v("SameSite")])]),_._v(" "),t("p",[_._v("Cookie 的 SameSite 属性用来限制第三方 Cookie，从而减少安全风险。")]),_._v(" "),t("p",[t("code",[_._v("验证 Referer")])]),_._v(" "),t("p",[_._v("验证一下发起请求的页面是不是我们的系统")]),_._v(" "),t("p",[t("code",[_._v("Token")])]),_._v(" "),t("p",[_._v("发送一个带有过期时间的 token")])])]),_._v(" "),t("h3",{attrs:{id:"_2-3-点击劫持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-点击劫持"}},[_._v("#")]),_._v(" 2.3 点击劫持")]),_._v(" "),t("ul",[t("li",[_._v("原理")])]),_._v(" "),t("p",[_._v("这是一种欺骗性比较强，同时也需要用户高度参与才能完成的一种攻击。"),t("br"),_._v("\n通常的攻击步骤是这样的："),t("br"),_._v("\n　　 1、攻击者构造一个诱导用户点击的内容，如 Web 页面小游戏 "),t("br"),_._v("\n　　 2、将被攻击的页面放入到 iframe 当中 "),t("br"),_._v("\n　　 3、利用 z-index 等 CSS 样式将这个 iframe 叠加到小游戏的垂直方向的正上方 "),t("br"),_._v("\n　　 4、把 iframe 设置为 100%透明度 "),t("br"),_._v("\n　　 5、受害者访问这个页面，肉眼看到的是一个小游戏，如果受到诱导进行了点击的话，实际上点击到的却是 iframe 中的页面")]),_._v(" "),t("ul",[t("li",[_._v("危害")])]),_._v(" "),t("p",[_._v("点击劫持的危害在于，攻击利用了受害者的用户身份，在其不知情的情况下进行一些操作。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("防御")]),_._v(" "),t("p",[_._v("设置页面是否可以在标签中显示 "),t("br"),_._v("\n1、DENY：不能被嵌入到任何 iframe 或者 frame 中。"),t("br"),_._v("\n2、SAMEORIGIN：页面只能被本站页面嵌入到 iframe 或者 frame 中"),t("br"),_._v("\n3、ALLOW-FROM uri：只能被嵌入到指定域名的框架中")])])]),_._v(" "),t("h3",{attrs:{id:"_2-4-本地存储数据泄露"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-本地存储数据泄露"}},[_._v("#")]),_._v(" 2.4 本地存储数据泄露")]),_._v(" "),t("p",[_._v("前端应用是完全暴露在用户以及攻击者面前的，在前端存储任何敏感、机密的数据，都会面临泄露的风险，就算是在前端通过 JS 脚本对数据进行加密基本也无济于事。")]),_._v(" "),t("h3",{attrs:{id:"_2-5-不安全的第三方依赖-cdn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-不安全的第三方依赖-cdn"}},[_._v("#")]),_._v(" 2.5 不安全的第三方依赖 CDN")]),_._v(" "),t("p",[_._v("在我们的系统中引用的一些在线的第三方库，可能会存在被别人贡献的危害，是的我们的系统中执行一些非常规的操作")]),_._v(" "),t("h3",{attrs:{id:"_2-6-登录的账户密码不能明文传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-登录的账户密码不能明文传输"}},[_._v("#")]),_._v(" 2.6 登录的账户密码不能明文传输")]),_._v(" "),t("h3",{attrs:{id:"_2-7-https-安全加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-https-安全加密"}},[_._v("#")]),_._v(" 2.7 https 安全加密")])])}),[],!1,null,null,null);t.default=s.exports}}]);